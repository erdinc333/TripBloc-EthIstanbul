// SPDX-License-Identifier: MIT

contract TripBloc {
    use std::collections::HashMap;

    pub struct Hotel {
        pub owner: address,
        pub ensName: string,
        pub stakingFee: u256,
        pub roomFee: u256,
        pub proposals: HashMap<u256, Proposal>,
        pub proposalIds: Vec<u256>,
    }

    pub struct Proposal {
        pub user: address,
        pub date: u256,
        pub paymentAmount: u256,
        pub status: ProposalStatus,
    }

    enum ProposalStatus { Pending, Accepted, Rejected }

    pub struct Request {
        pub requester: address,
        pub requestId: u256,
        pub paymentAmount: u256,
        pub status: RequestStatus,
    }

    enum RequestStatus { Pending, Approved, Rejected }

    pub mut hotels: HashMap<u256, Hotel> = HashMap::new();
    pub mut requests: HashMap<u256, Request> = HashMap::new();

    pub event HotelRegistered(u256 hotelId, address owner, string ensName, u256 stakingFee, u256 roomFee);
    pub event ProposalSubmitted(u256 hotelId, address user, u256 date, u256 paymentAmount, u256 proposalId);
    pub event ProposalStatusUpdated(u256 hotelId, u256 proposalId, ProposalStatus status);
    pub event RequestRaised(u256 requestId, address requester, u256 paymentAmount);
    pub event RequestStatusUpdated(u256 requestId, RequestStatus status);

    pub fn onlyPlatformOwner(ctx: Context) {
        require(ctx.sender == platformOwner(), "Only platform owner can call this function");
    }

    pub fn onlyHotelOwner(ctx: Context, hotelId: u256) {
        require(hotels[hotelId].owner == ctx.sender, "Only hotel owner can call this function");
    }

    pub fn isValidHotel(hotelId: u256) -> bool {
        hotels[hotelId].stakingFee > 0
    }

    pub fn isValidProposal(hotelId: u256, proposalId: u256) -> bool {
        hotels[hotelId].proposals[proposalId].user != address(0)
    }

    pub fn isValidRequest(requestId: u256) -> bool {
        requests[requestId].requester != address(0)
    }

    pub fn platformOwner() -> address {
        platformOwner
    }

    pub fn registerHotel(ctx: Context, hotelId: u256, ensName: string, roomFee: u256) {
        require(!isValidHotel(hotelId), "Hotel already registered");
        require(ctx.value > 0, "Staking fee must be greater than 0");

        let mut newHotel = Hotel {
            owner: ctx.sender,
            ensName: ensName,
            stakingFee: ctx.value,
            roomFee: roomFee,
            proposals: HashMap::new(),
            proposalIds: Vec::new(),
        };

        hotels[hotelId] = newHotel;

        emit HotelRegistered(hotelId, newHotel.owner, ensName, ctx.value, roomFee);
    }

    pub fn sendProposal(ctx: Context, hotelId: u256, date: u256, paymentAmount: u256) {
        require(isValidHotel(hotelId), "Hotel does not exist");
        require(ctx.value == paymentAmount, "Incorrect payment amount");

        let mut hotel = &mut hotels[hotelId];

        let proposalId = hotel.proposalIds.len();
        let mut newProposal = Proposal {
            user: ctx.sender,
            date: date,
            paymentAmount: paymentAmount,
            status: ProposalStatus::Pending,
        };

        hotel.proposals[proposalId] = newProposal;
        hotel.proposalIds.push(proposalId);

        emit ProposalSubmitted(hotelId, newProposal.user, date, paymentAmount, proposalId);
    }

    pub fn getHotelProposalIds(hotelId: u256) -> Vec<u256> {
        hotels[hotelId].proposalIds
    }

    pub fn approveRequest(ctx: Context, requestId: u256) {
    require(isValidRequest(requestId), "Request does not exist");
    require(onlyPlatformOwner(ctx), "Only platform owner can call this function");

    requests[requestId].status = RequestStatus::Approved;
    payable(requests[requestId].requester).transfer(requests[requestId].paymentAmount);

    emit RequestStatusUpdated(requestId, RequestStatus::Approved);
}

pub fn rejectRequest(ctx: Context, requestId: u256) {
    require(isValidRequest(requestId), "Request does not exist");
    require(onlyPlatformOwner(ctx), "Only platform owner can call this function");

    requests[requestId].status = RequestStatus::Rejected;
    payable(requests[requestId].requester).transfer(requests[requestId].paymentAmount);

    emit RequestStatusUpdated(requestId, RequestStatus::Rejected);
}
#GM
